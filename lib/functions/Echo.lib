#!/usr/bin/env bash

# /////////////////////////////////////////////////////////////////////////////////////////////// #

#### TEXT WRITING

## COLOR A PART OF A TEXT WITH ANOTHER COLOR.
## Pun between "deco(ration)" and "echo", followed by the first letter of the message type name (header (H), moving to a new sub-step (N), error (E) or success (S)).

function Decho() { local string=$1; echo "$COL_CYAN$string$COL_RESET"; }    # Colouring a part of a simple message written via the "echo" command.
function DechoE() { local string=$1; echo "$COL_CYAN$string$COL_RED"; }     # Error message
function DechoH() { local string=$1; echo "$COL_BLUE$string$COL_CYAN"; }    # Header text
function DechoN() { local string=$1; echo "$COL_CYAN$string$COL_YELLOW"; }  # New sub-step message
function DechoS() { local string=$1; echo "$COL_CYAN$string$COL_GREEN"; }   # Success message

# -----------------------------------------------

## DISPLAYING A MESSAGE ACCORDING TO THE CONTEXT.

# Error message
function EchoError() {
    #***** Parameters *****
    local string=$1
    local timer=$2
    
    #***** Code *****
    if test -z "$timer"; then
        timer=".5"
    fi
    
    if test -z "$MAIN_SCRIPT_LOG" || test -z "$FILE_LOG_PATH"; then
        echo "$TXT_R_TAB $string$COL_RESET"
    else
        CheckLog
        
        if test "$MAIN_SCRIPT_LOG" = "log"; then
            echo "$TXT_R_TAB $string$COL_RESET" >> "$FILE_LOG_PATH"
            
        elif test "$MAIN_SCRIPT_LOG" = "tee"; then
            echo "$TXT_R_TAB $string$COL_RESET" 2>&1 | tee -a "$FILE_LOG_PATH"
            
        else
            echo "Non-valid write output mode defined"
        
            return
        fi
    fi

    sleep "$timer"
}

# New sub-step message
function EchoNewstep() { local string=$1; 
    #***** Parameters *****
    local string=$1
    local timer=$2
    
    #***** Code *****
    if test -z "$timer"; then
        timer=".5"
    fi
    
    if test -z "$MAIN_SCRIPT_LOG" || test -z "$FILE_LOG_PATH"; then
        echo "$TXT_N_TAB $string$COL_RESET"
    else
        CheckLog
        
        if test "$MAIN_SCRIPT_LOG" = "log"; then
            echo "$TXT_N_TAB $string$COL_RESET" >> "$FILE_LOG_PATH"
            
        elif test "$MAIN_SCRIPT_LOG" = "tee"; then
            echo "$TXT_N_TAB $string$COL_RESET" 2>&1 | tee -a "$FILE_LOG_PATH"
            
        else
            echo "Non-valid write output mode defined"
        
            return
        fi
    fi

    sleep "$timer"
}

# Success message
function EchoSuccess() { 
    #***** Parameters *****
    local string=$1
    local timer=$2

    #***** Code *****
    if test -z "$timer"; then
        timer=".5"
    fi
    
    if test -z "$MAIN_SCRIPT_LOG" || test -z "$FILE_LOG_PATH"; then
        echo "$TXT_S_TAB $string$COL_RESET"
    else
        CheckLog
        
        if test "$MAIN_SCRIPT_LOG" = "log"; then
            echo "$TXT_S_TAB $string$COL_RESET" >> "$FILE_LOG_PATH"
            
        elif test "$MAIN_SCRIPT_LOG" = "tee"; then
            echo "$TXT_S_TAB $string$COL_RESET" 2>&1 | tee -a "$FILE_LOG_PATH"
            
        else
            echo "Non-valid write output mode defined"
        
            return
        fi
    fi

    sleep "$timer"
}


#### LINE BREAKS

# Redirecting the output of the "echo" command
function EchoLog() { CheckLog && echo "" >> "$FILE_LOG_PATH"; }

# -----------------------------------------------

## LINE BREAKS

# Redirecting the output of the "echo" command
function Newline() { CheckLog && echo "" 2>&1 | tee -a "$FILE_LOG_PATH"; }
